includes:
	- %rootDir%/conf/bleedingEdge.neon
	- %rootDir%/../phpstan-strict-rules/rules.neon
	- %rootDir%/../../../vendor/shipmonk/phpstan-rules/rules.neon
	- %rootDir%/../../forrest79/phpgsql-phpstan/extension.neon

parameters:
	level: max

	shipmonkRules:
		forbidCheckedExceptionInCallable:
			enabled: false
		forbidCheckedExceptionInYieldingMethod:
			enabled: false
		forbidUnsafeArrayKey:
			enabled: false
		forbidUnsetClassField:
			enabled: false
		forbidVariableTypeOverwriting:
			enabled: false
		uselessPrivatePropertyNullability:
			enabled: false

	ignoreErrors:
		# === This is OK ===

		-
			message: '#^Unsafe usage of new static\(\)\.$#'
			path: %rootDir%/../../../src/Db/Row.php
			count: 1

		-
			message: '#^Unsafe usage of new static\(\)\.$#'
			path: %rootDir%/../../../src/Fluent/Condition.php
			count: 2


		# === This is OK (just for tests or benchmarks) ===

		-
			message: '#^Parameter \#1 \$result of function pg_.+ expects PgSql\\Result, PgSql\\Result\|false given\.$#'
			path: %rootDir%/../../../tests/Integration/PgFunctionsTest.php
			count: 47

		-
			message: "#^Parameter \\#2 \\$queryParams of method Forrest79\\\\PhPgSql\\\\Fluent\\\\QueryBuilder\\:\\:createSqlDefinition\\(\\) expects array\\{select\\: array\\<int\\|string, BackedEnum\\|Forrest79\\\\PhPgSql\\\\Db\\\\Sql\\|int\\|string\\>, distinct\\: bool, distinctOn\\: list\\<Forrest79\\\\PhPgSql\\\\Db\\\\Sql\\|string\\>, tables\\: array\\<string, array\\{string, string\\}\\>, table\\-types\\: array\\{main\\: string\\|null, from\\: list\\<string\\>, joins\\: list\\<string\\>, using\\: string\\|null\\}, on\\-conditions\\: array\\<string, Forrest79\\\\PhPgSql\\\\Fluent\\\\Condition\\>, lateral\\-tables\\: array\\<string, string\\>, where\\: Forrest79\\\\PhPgSql\\\\Fluent\\\\Condition\\|null, \\.\\.\\.\\}, array\\{with\\: array\\{queries\\: array\\{\\}\\}\\} given\\.$#"
			count: 1
			path: tests/Unit/FluentQueryTest.php

		-
			message: '#^Parameter \#1 \$columns of method Forrest79\\PhPgSql\\Fluent\\Query::select\(\) expects array\<int\|string, BackedEnum\|bool\|Forrest79\\PhPgSql\\Db\\Sql\|int\|string\|null\>, array\<string, array\<int, string\>\> given\.$#'
			path: %rootDir%/../../../tests/Unit/FluentQueryTest.php
			count: 1

		-
			message: '#^AnonymousClass.+::__construct\(\) does not call parent constructor from Forrest79\\PhPgSql\\Db\\PreparedStatementHelper\.$#'
			path: %rootDir%/../../../tests/Unit/QueryTest.php
			count: 1

		-
			message: '#^Call to an undefined method Forrest79\\PhPgSql\\Db\\Result::fetchOrException\(\)\.$#'
			path: %rootDir%/../../../tests/Integration/CustomResultTest.php
			count: 2

		-
			message: '#^Binary operation ".=?" between .+ results in an error\.$#'
			path: %rootDir%/../../../tests/Integration/FetchMutatorTest.php
			count: 28

		-
			message: '#^Using \+ over non-number \(mixed \+ int\)$#'
			path: %rootDir%/../../../tests/Integration/FetchMutatorTest.php
			count: 3

		-
			message: '#^Expression ".+" on a separate line does not do anything\.$#'
			path: %rootDir%/../../../tests/Integration/FetchTest.php
			count: 8

		-
			message: '#^Offset 1 does not exist on Forrest79\\PhPgSql\\Db\\Row\.$#'
			path: %rootDir%/../../../tests/Integration/FetchTest.php
			count: 1

		-
			message: '#^Cannot assign offset 1 to Forrest79\\PhPgSql\\Db\\Row\.$#'
			path: %rootDir%/../../../tests/Integration/FetchTest.php
			count: 1

		-
			message: '#^Offset 1 on Forrest79\\PhPgSql\\Db\\Row in isset\(\) does not exist\.$#'
			path: %rootDir%/../../../tests/Integration/FetchTest.php
			count: 1

		-
			message: '#^Cannot unset offset 1 on Forrest79\\PhPgSql\\Db\\Row\.$#'
			path: %rootDir%/../../../tests/Integration/FetchTest.php
			count: 1

		-
			message: '#^Expression ".+" on a separate line does not do anything\.$#'
			path: %rootDir%/../../../tests/Integration/ParseDataTypeTest.php
			count: 4

		-
			message: "#^Call to function array_key_exists\\(\\) with '.+' and array\\{.+\\} will always evaluate to (true|false)\\.$#"
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 10

		-
			message: '#^Call to function array_key_exists\(\) on a separate line has no effect\.$#'
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 2

		-
			message: '#^Offset 0 on (array\{1\}|null) on left side of \?\? .+\.$#'
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 2

		-
			message: "#^Offset '[a-zA-Z0-9]+' on array\\{.+\\} in isset\\(\\) .+\\.$#"
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 8

		-
			message: '#^Empty array passed to foreach\.$#'
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 1

		-
			message: '#^Call to function hrtime\(\) on a separate line has no effect\.$#'
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 1

		-
			message: '#^Strict comparison using \!\=\= between array\{\} and array\{\} will always evaluate to false\.$#'
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 1

		-
			message: '#^Unused result of "\|\|" operator\.$#'
			path: %rootDir%/../../../benchmarks/BasicPhpBenchmark.php
			count: 8

		-
			message: '#^Strict comparison using \!\=\= between array\<int, string\> and null will always evaluate to true\.$#'
			path: %rootDir%/../../../benchmarks/GetFieldTypesBenchmark.php
			count: 3

		# === Explicit mixed check (correct type is checked in tests)

		-
			message: '#^Cannot call method toArray\(\) on mixed\.$#'
			path: %rootDir%/../../../tests/Integration/BasicTest.php
			count: 1

		-
			message: '#^Cannot access offset [012] on mixed\.$#'
			path: %rootDir%/../../../tests/Integration/ParseDataTypeTest.php
			count: 63

		-
			message: '#^Cannot access offset [01] on mixed\.$#'
			path: %rootDir%/../../../tests/Unit/ParseDataTypeTest.php
			count: 11

		-
			message: '#^Cannot call method format\(\) on mixed\.$#'
			path: %rootDir%/../../../tests/Unit/ParseDataTypeTest.php
			count: 17

		# === We know, that this can happen ===

		-
			message: '#^Instanceof between BackedEnum and BackedEnum will always evaluate to true\.$#'
			path: %rootDir%/../../../src/Fluent/Query.php
			count: 1

		-
			message: '#^Result of && is always false\.$#'
			path: %rootDir%/../../../src/Fluent/Query.php
			count: 1

		-
			message: "#^Strict comparison using === between 'suffix' and 'suffix' will always evaluate to true\\.$#"
			path: %rootDir%/../../../src/Fluent/QueryBuilder.php
			count: 1

		-
			message: '#^Unreachable statement - code above always terminates\.$#'
			path: %rootDir%/../../../src/Fluent/QueryBuilder.php
			count: 1

		-
			message: "#^Offset 'prefix'\\|'suffix' on array\\{select\\: array\\<int\\|string, BackedEnum\\|Forrest79\\\\PhPgSql\\\\Db\\\\Sql\\|int\\|string\\>, distinct\\: bool, distinctOn\\: list\\<Forrest79\\\\PhPgSql\\\\Db\\\\Sql\\|string\\>, tables\\: array\\<string, array\\{string, string\\}\\>, table\\-types\\: array\\{main\\: string\\|null, from\\: list\\<string\\>, joins\\: list\\<string\\>, using\\: string\\|null\\}, on\\-conditions\\: array\\<string, Forrest79\\\\PhPgSql\\\\Fluent\\\\Condition\\>, lateral\\-tables\\: array\\<string, string\\>, where\\: Forrest79\\\\PhPgSql\\\\Fluent\\\\Condition\\|null, \\.\\.\\.\\} on left side of \\?\\? always exists and is not nullable\\.$#"
			path: %rootDir%/../../../src/Fluent/QueryBuilder.php
			count: 1

		# === We know, that this can't happen ===

		-
			message: '#^Property Forrest79\\PhPgSql\\Fluent\\Condition::\$conditions \(list\<list\<mixed\>\|Forrest79\\PhPgSql\\Fluent\\Condition\>\) does not accept non\-empty\-array\<int, list\<mixed\>\|Forrest79\\PhPgSql\\Fluent\\Condition\>\.$#'
			path: %rootDir%/../../../src/Fluent/Condition.php
			count: 1

		-
			message: '#^Parameter \#2 \$expected of static method Forrest79\\PhPgSql\\Fluent\\Exceptions\\ConditionException::badParamsCount\(\) expects int, int(\<0, max\>)?\|false(\|null)? given\.$#' # (|null)? is for forward PHP 8 compatibility
			path: %rootDir%/../../../src/Fluent/Condition.php
			count: 1

		-
			message: '#^Parameter \#2 \$rawValues of method Forrest79\\PhPgSql\\Db\\RowFactory::create\(\) expects array\<string, string\|null\>, array\<int\|string, string\|null\> given\.$#'
			path: %rootDir%/../../../src/Db/Result.php
			count: 1

		-
			message: '#^Call to function is_string\(\) with string will always evaluate to true\.$#'
			path: %rootDir%/../../../src/Db/Row.php
			count: 3

		-
			message: '#^Method Forrest79\\PhPgSql\\Db\\RowIterator::current\(\) should return Forrest79\\PhPgSql\\Db\\Row but returns Forrest79\\PhPgSql\\Db\\Row\|null\.$#'
			path: %rootDir%/../../../src/Db/RowIterator.php
			count: 1

		# === PHPStan imperfection ===

		-
			message: "#^Property Forrest79\\\\PhPgSql\\\\Fluent\\\\Query\\:\\:\\$params \\(array\\{select\\: array\\<int\\|string, BackedEnum\\|Forrest79\\\\PhPgSql\\\\Db\\\\Sql\\|int\\|string\\>, distinct\\: bool, distinctOn\\: list\\<Forrest79\\\\PhPgSql\\\\Db\\\\Sql\\|string\\>, tables\\: array\\<string, array\\{string, string\\}\\>, table\\-types\\: array\\{main\\: string\\|null, from\\: list\\<string\\>, joins\\: list\\<string\\>, using\\: string\\|null\\}, on\\-conditions\\: array\\<string, Forrest79\\\\PhPgSql\\\\Fluent\\\\Condition\\>, lateral\\-tables\\: array\\<string, string\\>, where\\: Forrest79\\\\PhPgSql\\\\Fluent\\\\Condition\\|null, \\.\\.\\.\\}\\) does not accept .+\\.$#"
			path: src/Fluent/Query.php
			count: 8

		# === Fix PhPgSql-PHPStan rules ===

		-
			message: '#^Method Forrest79\\PhPgSql\\Fluent\\QueryExecute::getIterator\(\) should return Forrest79\\PhPgSql\\Db\\RowIterator but returns iterable<int, Forrest79\\PhPgSql\\Db\\Row>\.$#'
			path: %rootDir%/../../../src/Fluent/QueryExecute.php
			count: 1
